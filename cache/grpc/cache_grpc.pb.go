// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: grpc/cache.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CacheHandlerClient is the client API for CacheHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CacheHandlerClient interface {
	GetKey(ctx context.Context, in *GetKeyRequest, opts ...grpc.CallOption) (*GetKeyReply, error)
	SetKey(ctx context.Context, in *SetKeyRequest, opts ...grpc.CallOption) (*SetKeyReply, error)
	Clear(ctx context.Context, in *ClearRequest, opts ...grpc.CallOption) (*ClearReply, error)
}

type cacheHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewCacheHandlerClient(cc grpc.ClientConnInterface) CacheHandlerClient {
	return &cacheHandlerClient{cc}
}

func (c *cacheHandlerClient) GetKey(ctx context.Context, in *GetKeyRequest, opts ...grpc.CallOption) (*GetKeyReply, error) {
	out := new(GetKeyReply)
	err := c.cc.Invoke(ctx, "/cache.CacheHandler/GetKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheHandlerClient) SetKey(ctx context.Context, in *SetKeyRequest, opts ...grpc.CallOption) (*SetKeyReply, error) {
	out := new(SetKeyReply)
	err := c.cc.Invoke(ctx, "/cache.CacheHandler/SetKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheHandlerClient) Clear(ctx context.Context, in *ClearRequest, opts ...grpc.CallOption) (*ClearReply, error) {
	out := new(ClearReply)
	err := c.cc.Invoke(ctx, "/cache.CacheHandler/Clear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CacheHandlerServer is the server API for CacheHandler service.
// All implementations must embed UnimplementedCacheHandlerServer
// for forward compatibility
type CacheHandlerServer interface {
	GetKey(context.Context, *GetKeyRequest) (*GetKeyReply, error)
	SetKey(context.Context, *SetKeyRequest) (*SetKeyReply, error)
	Clear(context.Context, *ClearRequest) (*ClearReply, error)
	mustEmbedUnimplementedCacheHandlerServer()
}

// UnimplementedCacheHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedCacheHandlerServer struct {
}

func (UnimplementedCacheHandlerServer) GetKey(context.Context, *GetKeyRequest) (*GetKeyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKey not implemented")
}
func (UnimplementedCacheHandlerServer) SetKey(context.Context, *SetKeyRequest) (*SetKeyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetKey not implemented")
}
func (UnimplementedCacheHandlerServer) Clear(context.Context, *ClearRequest) (*ClearReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Clear not implemented")
}
func (UnimplementedCacheHandlerServer) mustEmbedUnimplementedCacheHandlerServer() {}

// UnsafeCacheHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CacheHandlerServer will
// result in compilation errors.
type UnsafeCacheHandlerServer interface {
	mustEmbedUnimplementedCacheHandlerServer()
}

func RegisterCacheHandlerServer(s grpc.ServiceRegistrar, srv CacheHandlerServer) {
	s.RegisterService(&CacheHandler_ServiceDesc, srv)
}

func _CacheHandler_GetKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheHandlerServer).GetKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cache.CacheHandler/GetKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheHandlerServer).GetKey(ctx, req.(*GetKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheHandler_SetKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheHandlerServer).SetKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cache.CacheHandler/SetKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheHandlerServer).SetKey(ctx, req.(*SetKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheHandler_Clear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheHandlerServer).Clear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cache.CacheHandler/Clear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheHandlerServer).Clear(ctx, req.(*ClearRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CacheHandler_ServiceDesc is the grpc.ServiceDesc for CacheHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CacheHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cache.CacheHandler",
	HandlerType: (*CacheHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetKey",
			Handler:    _CacheHandler_GetKey_Handler,
		},
		{
			MethodName: "SetKey",
			Handler:    _CacheHandler_SetKey_Handler,
		},
		{
			MethodName: "Clear",
			Handler:    _CacheHandler_Clear_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/cache.proto",
}
